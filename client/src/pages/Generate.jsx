// src/pages/Generate.jsx

import React, { useState, useRef } from 'react';
import { Button } from '../components/ui/button';
import { Textarea } from '../components/ui/textarea';
import { Label } from '../components/ui/label';
import { Input } from '../components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Loader2, Zap, FileText, ClipboardCopy, Settings2, Sparkles, Lightbulb } from 'lucide-react';
import { marked } from 'marked';
import { motion, useInView } from 'framer-motion';

const Generate = () => {
  const [prompt, setPrompt] = useState('');
  const [generatedDocument, setGeneratedDocument] = useState('');
  const [documentTitle, setDocumentTitle] = useState('');
  const [documentType, setDocumentType] = useState('contract');
  const [jurisdiction, setJurisdiction] = useState('us-federal');
  const [tone, setTone] = useState('formal');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState(null);

  // Refs for in-view animations
  const mainContentRef = useRef(null);
  // Key change: Increased amount to ensure cards are clearly visible for re-animation
  const isMainContentInView = useInView(mainContentRef, { once: false, amount: 0.4 }); // Trigger when 40% in view

  const handleGenerate = async (e) => {
    e.preventDefault();
    setIsGenerating(true);
    setError(null);
    setGeneratedDocument(''); // Clear previous output
    setDocumentTitle(''); // Clear previous title

    if (!prompt.trim()) {
      setError('Please provide a description or prompt to generate a document.');
      setIsGenerating(false);
      return;
    }

    try {
      // --- Mocking API Response for Demonstration ---
      await new Promise(resolve => setTimeout(resolve, 3000));

      const mockTitle = `Draft ${documentType.charAt(0).toUpperCase() + documentType.slice(1)}: ${prompt.substring(0, Math.min(prompt.length, 50))}...`;
      const mockDocument = `
# ${mockTitle}

This document is an AI-generated example based on your detailed prompt: **"${prompt}"**.

---

**Document Details:**
* **Type:** \`${documentType.charAt(0).toUpperCase() + documentType.slice(1)}\`
* **Jurisdiction:** \`${jurisdiction.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}\`
* **Tone:** \`${tone.charAt(0).toUpperCase() + tone.slice(1)}\`

---

### Article I: General Provisions

**1.1. Purpose:** This document is created by the Legal Document Analyzer as a demonstration of its capabilities in generating legal content. It is designed to assist users in understanding potential document structures based on their input.

**1.2. Disclaimer:** THIS GENERATED CONTENT IS FOR ILLUSTRATIVE AND INFORMATIONAL PURPOSES ONLY AND **DOES NOT CONSTITUTE LEGAL ADVICE**. Always consult with a qualified legal professional for personalized legal guidance and before making any legal decisions or acting upon any content generated herein. The accuracy, completeness, and applicability of this document are not guaranteed.

### Article II: Illustrative Clauses

**2.1. Confidentiality:** All information shared between parties in relation to the prompt shall be deemed confidential and shall not be disclosed to any third party without prior written consent.

**2.2. Governing Law:** This illustrative document shall be governed by and construed in accordance with the laws of the specified jurisdiction, without regard to its conflict of law principles.

**2.3. Severability:** If any provision of this document is found to be unenforceable, the remaining provisions shall continue in full force and effect.

---

*Generated by Legal Document Analyzer AI on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}.*
*Always review and adapt to your specific legal requirements.*
      `;

      setGeneratedDocument(mockDocument);
      setDocumentTitle(mockTitle);

    } catch (err) {
      setError(`Error generating document: ${err.message || 'An unexpected error occurred. Please try again.'}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = () => {
    if (generatedDocument) {
      navigator.clipboard.writeText(generatedDocument);
      alert('Document copied to clipboard!');
    }
  };

  // --- Framer Motion Variants ---

  // Header Text
  const headerVariants = {
    hidden: { opacity: 0, y: -30 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.7, ease: "easeOut" } },
  };

  // Individual Card (Input and Output cards)
  const cardVariants = {
    hidden: { opacity: 0, y: 50, scale: 0.9 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 80,
        damping: 12,
        duration: 0.8,
      },
    },
  };

  // Variants for elements inside the form (textarea, selects, button)
  const formItemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5, ease: "easeOut" } },
  };

  // Variants for the generate button's sparkles icon (a pulse that runs once then stops)
  const sparklesPulse = {
    active: {
      scale: [1, 1.2, 1],
      opacity: [0.8, 1, 0.8],
      transition: {
        duration: 0.6,
        repeat: 1,
        ease: "easeInOut",
      },
    },
    inactive: { scale: 1, opacity: 1 },
  };

  // Variants for the output placeholder div
  const outputPlaceholderVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.7, ease: "easeOut" } },
  };


  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-950 text-gray-800 dark:text-gray-200 pb-16">
      {/* Page Header Section */}
      <section className="relative py-20 px-4 md:px-8 bg-gradient-to-br from-purple-100 to-blue-50 dark:from-indigo-950 dark:to-purple-950 text-center shadow-inner overflow-hidden">
        <div className="relative z-10 max-w-4xl mx-auto">
          <motion.h1
            className="text-4xl sm:text-5xl md:text-6xl font-extrabold leading-tight mb-6 text-gray-900 dark:text-white"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: false, amount: 0.7 }}
            variants={headerVariants}
          >
            Generate Legal <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-800 dark:from-teal-400 dark:to-blue-300">Documents with AI</span>
          </motion.h1>
          <motion.p
            className="text-lg sm:text-xl md:text-2xl mb-10 text-gray-700 dark:text-gray-300 leading-relaxed max-w-2xl mx-auto"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: false, amount: 0.7 }}
            variants={headerVariants}
            transition={{ delay: 0.2, duration: 0.7, ease: "easeOut" }}
          >
            Intelligently draft contracts, agreements, letters, and more, tailored to your specifications.
          </motion.p>
        </div>
      </section>

      {/* Main Content Area - Enhanced Background and Structure */}
      <div
        ref={mainContentRef} // Attach ref here
        className="py-16 px-4 md:px-8 max-w-7xl mx-auto space-y-12
                          relative z-10
                          after:content-[''] after:absolute after:inset-0 after:bg-[url('/path/to/subtle-pattern.svg')] dark:after:bg-[url('/path/to/subtle-dark-pattern.svg')] after:opacity-5 after:pointer-events-none after:z-[-1]
                          before:content-[''] before:absolute before:inset-0 before:bg-radial-gradient-t-l from-transparent to-blue-50/10 dark:to-blue-900/10 before:z-[-1]"
      >
        {/* Document Generation Input Card */}
        <motion.div
          key={`input-card-${isMainContentInView}`} // Key changes to force re-render
          className="bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-2xl border border-gray-100 dark:border-gray-700 hover:shadow-3xl transition-all duration-300 transform"
          variants={cardVariants}
          initial="hidden"
          animate={isMainContentInView ? "visible" : "hidden"} // Controlled by ref in view
          whileHover={{ scale: 1.005, y: -5 }}
          whileTap={{ scale: 0.995 }}
        >
          <CardHeader className="p-0 mb-6">
            <CardTitle className="text-3xl font-bold text-gray-900 dark:text-white flex items-center">
              <Zap className="mr-3 h-8 w-8 text-blue-600 animate-pulse-fast" />
              Generate Your Document
            </CardTitle>
            <CardDescription className="text-gray-600 dark:text-gray-300 mt-2 text-lg">
              Provide a detailed description of the document you need, and configure the generation options below.
            </CardDescription>
          </CardHeader>
          <CardContent className="p-0">
            <form onSubmit={handleGenerate} className="space-y-8">
              <motion.div
                variants={formItemVariants}
                initial="hidden"
                animate={isMainContentInView ? "visible" : "hidden"} // Ensure prompt animates with card
              >
                <Label htmlFor="prompt" className="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-2 block">
                  Document Description / Requirements <span className="text-red-500">*</span>
                </Label>
                <Textarea
                  id="prompt"
                  placeholder="e.g., Draft a non-disclosure agreement for two companies: 'InnovateTech Solutions' and 'Global Ventures Inc.' for a joint venture in AI software development. Include clauses on confidentiality, non-compete for 2 years, and jurisdiction in Delaware, USA."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  rows={10}
                  required
                  className="mt-2 text-base p-4 border-2 border-gray-200 dark:border-gray-600 focus:border-blue-500 focus:dark:border-blue-400 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 resize-y min-h-[180px]"
                />
              </motion.div>

              {/* Generation Options */}
              <div>
                <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
                  <Settings2 className="mr-2 h-5 w-5 text-purple-500" />
                  Generation Options
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <motion.div
                    variants={formItemVariants}
                    initial="hidden"
                    animate={isMainContentInView ? "visible" : "hidden"}
                    transition={{ delay: 0.1, ...formItemVariants.visible.transition }}
                  >
                    <Label htmlFor="documentType" className="text-gray-700 dark:text-gray-300">Document Type</Label>
                    <Select value={documentType} onValueChange={setDocumentType}>
                      <SelectTrigger id="documentType" className="w-full mt-2 text-base">
                        <SelectValue placeholder="Select type" />
                      </SelectTrigger>
                      <SelectContent className="dark:bg-gray-700 dark:text-gray-200">
                        <SelectItem value="contract">Contract</SelectItem>
                        <SelectItem value="agreement">Agreement</SelectItem>
                        <SelectItem value="letter">Letter</SelectItem>
                        <SelectItem value="affidavit">Affidavit</SelectItem>
                        <SelectItem value="policy">Policy</SelectItem>
                        <SelectItem value="memorandum">Memorandum</SelectItem>
                        <SelectItem value="patent">Patent Application</SelectItem>
                        <SelectItem value="brief">Legal Brief</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </motion.div>

                  <motion.div
                    variants={formItemVariants}
                    initial="hidden"
                    animate={isMainContentInView ? "visible" : "hidden"}
                    transition={{ delay: 0.2, ...formItemVariants.visible.transition }}
                  >
                    <Label htmlFor="jurisdiction" className="text-gray-700 dark:text-gray-300">Jurisdiction</Label>
                    <Select value={jurisdiction} onValueChange={setJurisdiction}>
                      <SelectTrigger id="jurisdiction" className="w-full mt-2 text-base">
                        <SelectValue placeholder="Select jurisdiction" />
                      </SelectTrigger>
                      <SelectContent className="dark:bg-gray-700 dark:text-gray-200">
                        <SelectItem value="us-federal">US (Federal)</SelectItem>
                        <SelectItem value="us-delaware">US (Delaware)</SelectItem>
                        <SelectItem value="us-california">US (California)</SelectItem>
                        <SelectItem value="uk">UK</SelectItem>
                        <SelectItem value="canada">Canada</SelectItem>
                        <SelectItem value="australia">Australia</SelectItem>
                        <SelectItem value="india">India</SelectItem>
                        <SelectItem value="general">General</SelectItem>
                      </SelectContent>
                    </Select>
                  </motion.div>

                  <motion.div
                    variants={formItemVariants}
                    initial="hidden"
                    animate={isMainContentInView ? "visible" : "hidden"}
                    transition={{ delay: 0.3, ...formItemVariants.visible.transition }}
                  >
                    <Label htmlFor="tone" className="text-gray-700 dark:text-gray-300">Tone</Label>
                    <Select value={tone} onValueChange={setTone}>
                      <SelectTrigger id="tone" className="w-full mt-2 text-base">
                        <SelectValue placeholder="Select tone" />
                      </SelectTrigger>
                      <SelectContent className="dark:bg-gray-700 dark:text-gray-200">
                        <SelectItem value="formal">Formal</SelectItem>
                        <SelectItem value="neutral">Neutral</SelectItem>
                        <SelectItem value="concise">Concise</SelectItem>
                        <SelectItem value="aggressive">Aggressive</SelectItem>
                        <SelectItem value="persuasive">Persuasive</SelectItem>
                      </SelectContent>
                    </Select>
                  </motion.div>
                </div>
              </div>

              {error && (
                <motion.p
                  className="text-red-600 dark:text-red-400 text-sm font-semibold mt-4 bg-red-50 dark:bg-red-950 p-3 rounded-md border border-red-200 dark:border-red-700"
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  transition={{ duration: 0.3 }}
                >
                  <Lightbulb className="inline-block mr-2 h-4 w-4 text-red-500" /> {error}
                </motion.p>
              )}

              <motion.div
                variants={formItemVariants}
                initial="hidden"
                animate={isMainContentInView ? "visible" : "hidden"}
                transition={{ delay: error ? 0.4 : 0.5, ...formItemVariants.visible.transition }} // Adjust delay based on error
              >
                <Button
                  type="submit"
                  className="w-full py-3.5 text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 transition-all duration-300 shadow-xl hover:shadow-2xl active:scale-98 transform"
                  disabled={isGenerating}
                >
                  {isGenerating ? (
                    <>
                      <motion.span
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, ease: "linear", repeat: Infinity }}
                      >
                        <Loader2 className="mr-3 h-7 w-7" />
                      </motion.span>
                      Drafting your legal document...
                    </>
                  ) : (
                    <>
                      <motion.span
                        variants={sparklesPulse}
                        animate="active"
                        key={isGenerating}
                      >
                        <Sparkles className="mr-3 h-7 w-7" />
                      </motion.span>
                      Generate Document Now
                    </>
                  )}
                </Button>
              </motion.div>
            </form>
          </CardContent>
        </motion.div>

        {/* Generated Document Output Card */}
        <motion.div
          key={`output-card-${isMainContentInView}`} // Key changes to force re-render
          className="bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-2xl border border-gray-100 dark:border-gray-700 min-h-[400px] flex flex-col"
          variants={cardVariants}
          initial="hidden"
          // Add a staggered delay relative to the first card's animation start
          animate={isMainContentInView ? "visible" : "hidden"}
          transition={{ delay: 0.3, ...cardVariants.visible.transition }}
          whileHover={{ scale: 1.005, y: -5 }}
          whileTap={{ scale: 0.995 }}
        >
          <CardHeader className="p-0 mb-6 flex-row items-center justify-between">
            <CardTitle className="text-3xl font-bold text-gray-900 dark:text-white flex items-center">
              <FileText className="mr-3 h-8 w-8 text-green-600" />
              Generated Output
            </CardTitle>
            {generatedDocument && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ type: "spring", stiffness: 100, damping: 10, delay: 0.1 }} // Slightly earlier for copy button
              >
                <Button
                  variant="outline"
                  size="lg"
                  onClick={handleCopy}
                  className="text-blue-600 dark:text-blue-400 border-blue-600 dark:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900 transition-colors duration-200 flex items-center"
                >
                  <ClipboardCopy className="mr-2 h-5 w-5" /> Copy Document
                </Button>
              </motion.div>
            )}
          </CardHeader>
          <CardContent className="p-0 flex-grow relative">
            {isGenerating && (
              <motion.div
                className="absolute inset-0 flex flex-col items-center justify-center bg-white/70 dark:bg-gray-800/70 z-10 rounded-xl backdrop-blur-sm"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Loader2 className="h-20 w-20 text-blue-500 animate-spin-slow mb-6" />
                <p className="text-2xl font-semibold text-blue-600 dark:text-blue-400">AI is drafting your document...</p>
                <p className="text-lg text-gray-600 dark:text-gray-300 mt-2">Please wait, this may take a moment.</p>
              </motion.div>
            )}
            {generatedDocument ? (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, ease: "easeOut" }}
              >
                <div className="mb-4">
                  <Label htmlFor="documentTitle" className="text-sm text-gray-700 dark:text-gray-300">Document Title</Label>
                  <Input
                    type="text"
                    id="documentTitle"
                    value={documentTitle}
                    onChange={(e) => setDocumentTitle(e.target.value)}
                    className="mt-1 text-xl font-semibold bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600 focus:border-blue-500 focus:dark:border-blue-400 transition-colors duration-200"
                    readOnly={isGenerating}
                  />
                </div>
                <div className="prose dark:prose-invert max-w-none overflow-y-auto h-[450px] border border-gray-200 dark:border-gray-600 p-6 rounded-lg bg-gray-50 dark:bg-gray-700/50 text-gray-800 dark:text-gray-200 shadow-inner">
                  <div dangerouslySetInnerHTML={{ __html: marked.parse(generatedDocument) }} />
                </div>
              </motion.div>
            ) : (
              <motion.div
                className="text-center text-gray-500 dark:text-gray-400 mt-16 p-4 border border-dashed border-gray-300 dark:border-gray-600 rounded-lg flex items-center justify-center min-h-[300px] flex-col"
                variants={outputPlaceholderVariants}
                initial="hidden"
                animate={isMainContentInView ? "visible" : "hidden"} // Controlled by ref
              >
                <FileText className="h-24 w-24 text-gray-300 dark:text-gray-600 mb-6" />
                <p className="text-xl font-medium mb-2">Your AI-generated document will appear here.</p>
                <p className="text-md">Fill in the requirements and click "Generate Document Now" to get started!</p>
              </motion.div>
            )}
          </CardContent>
        </motion.div>
      </div>
    </div>
  );
};

export default Generate;